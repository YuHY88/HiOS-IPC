/*
*    loop-detect define
*/


#ifndef HIOS_LOOP_DETECT_H
#define HIOS_LOOP_DETECT_H

#include <lib/ether.h>
#include <ftm/pkt_eth.h>
#include <l2/l2_if.h>
#include "lib/hptimer.h"

#define LOOPD_DEF_VLAN_ID  4095
#define LOOPD_DEF_RES_TIME 30
#define LOOPD_DEF_INTERVAL 1
#define LOOPD_DEF_TLV_MAX 8

#define LOOPD_SUBTYPE (0x0003)
#define LOOPD_VERSION (0x0000)

enum LOOPD_FLAG
{
	LOOPD_FORWARD = 0,
	LOOPD_LOOPBACK
};

/*loopd 目的地址*/
#define LOOPD_MC_MAC  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}

/* TLV Types */
#define LOOPD_EOP_TLV           0
#define LOOPD_DEV_ID_TLV        1
#define LOOPD_PORT_IFINDEX_TLV  2
#define LOOPD_PORT_NAME_TLV	    3
#define LOOPD_SYS_NAME_TLV	    4
#define LOOPD_CHASSIS_ID_TLV    5
#define LOOPD_SLOT_ID_TLV       6
#define LOOPD_SUB_SLOT_TLV      7

#define LOOPDETECT_TIMER_ON_LOOP(T,F,S,V) \
			do { \
				if (! (T)) \
				(T) = high_pre_timer_add ("loopdetect_timer",LIB_TIMER_TYPE_LOOP, (F), (S), (V)*1000); \
			} while (0)

#define LOOPDETECT_TIMER_ON_UNLOOP(T,F,S,V) \
							do { \
								if (! (T)) \
								(T) = high_pre_timer_add ("loopdetect_timer",LIB_TIMER_TYPE_NOLOOP, (F), (S), (V)*1000); \
							} while (0)

#define LOOPDETECT_TIMER_OFF(T) \
			do { \
				if (T) \
				{ \
					high_pre_timer_delete (T); \
					(T) = 0; \
				} \
			} while (0)

/* 端口环路检测的数据结构 */
struct loop_detect
{
	uint16_t vlan;          /* 发送和接收报文的 vlan，默认 4096 表示 untag */
	uint16_t restore_time;  /* 环路恢复的检测时间, 默认 10 分钟 */
	uint8_t  interval;      /* 报文发送间隔，默认 1s */
	uint8_t  loop_flag;     /* 1: 有环路， 0: 没环路 */
	uint16_t loop_times;	/*环路次数*/
	uint32_t pkt_recv;      /* 接收的报文数 */
	uint32_t pkt_send;      /* 发送的报文数 */
    enum PORT_ACTION act;   /* 检测到环路后执行的动作 */
	enum PORT_STATUS status;/* 端口的转发状态 */
	//struct thread *ptimer1;	/* 发送报文的 timer */
	//struct thread *ptimer2; /* 检测环路恢复的 timer */

	TIMERID ptimer1;
	TIMERID ptimer2;
};

struct loopd_hdr
{
	uint16_t h_code;  /* 协议子类型*/
	uint16_t h_ver;  /* 版本*/
	uint16_t h_length;  /* 报文长度*/
	uint16_t h_resv;  /* 保留字段*/
}__attribute__((packed));

struct loopd_tlv
{
    uint8_t devid_type;/*Device Id*/
    uint8_t devid_len;
    uint8_t	devid_val[ETH_ALEN];
    uint8_t if_type;/*Ifindex*/
    uint8_t if_len;
    uint32_t if_val;
    uint8_t pname_type;/*Port Name*/
    uint8_t pname_len;
    sint8 pname_val[IFNET_NAMESIZE];
}__attribute__((packed));

struct loopd_frame
{
	struct loopd_hdr ldhdr;
	struct loopd_tlv tlv;
}__attribute__((packed));


struct loopdetect_global
{
	uint32_t loopdetect_debug;
	uint8_t source[ETH_ALEN];/*设备桥MAC*/
};

/*用于网管批量查询*/
struct loop_detect_snmp
{
	uint32_t ifindex;
	struct loop_detect loopdetect;
};

extern struct loopdetect_global g_loopdetect_data;

/* 端口收到报文则说明出现环路 */
int loopdetect_pkt_recv(struct pkt_buffer *pkt);


/* 定期在端口发送检测报文 */
int loopdetect_pkt_send(void * arg);


/* 端口环路状态设置 */
int loopdetect_status_set(struct l2if *pl2_if, enum LOOPD_FLAG loop_flag);


/* 接口下的 loopdetect 配置保存 */
void l2if_loopdetect_config_write(struct vty *vty, struct loop_detect *plpd);

void loopdetect_init(void);

void loopdetect_cli_init(void);

int loopdetect_snmp_port_info_get(uint32_t ifindex, struct  loop_detect_snmp loopdetect_snmp[]);

void loopdetect_clean_port(struct l2if *pif);

int loopdetect_restore_proc(void *arg);

void loopdetect_data_init(void);
void loopdetect_pkt_register(void);
void loopdetect_pkt_unregister(void);
void loopdetect_info_show(struct vty *vty, struct l2if *pl2_if);
#endif
