/*
* Note: this file originally auto-generated by mib2c using
*       version : 1.0.0 $ of : mib2c.snmp_handler.conf,v $ zhongjh@huahuan.com
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <lib/thread.h>

#include "socketComm/gpnSockMsgDef.h"
#include "socketComm/gpnSockCommModuDef.h"
#include "gpnAlmApi.h"
#include "gpnAlmSnmp.h"
#include "gpnAlmTrap.h"

void 
send_alarmProductTrap_trap(unsigned int *alarmTrapTableDataRow)
{
	stSnmpAlmCurrDSTableInfo *pRow = (stSnmpAlmCurrDSTableInfo *)alarmTrapTableDataRow;	
	alarm_send_trap ((char *)pRow, ALM_PRODUCT_TRAP);
}

void 
send_alarmDisappearTrap_trap(unsigned int *alarmTrapTableDataRow)
{
	stSnmpAlmHistDSTableInfo *pRow = (stSnmpAlmHistDSTableInfo *)alarmTrapTableDataRow;	
	alarm_send_trap ((char *)pRow, ALM_DISAPPEAR_TRAP);
}
void 
send_alarmEventReportTrap_trap(unsigned int *alarmTrapTableDataRow)
{
	stSnmpEventDSTableInfo *pRow = (stSnmpEventDSTableInfo *)alarmTrapTableDataRow;	
	alarm_send_trap ((char *)pRow, ALM_EVENT_REPORT_TRAP);
}
void 
send_alarmReverseAutoRecTrap_trap(unsigned int *alarmTrapTableDataRow)
{
	stSnmpAlmAttribCfgTableInfo	*pRow = (stSnmpAlmAttribCfgTableInfo *)alarmTrapTableDataRow;
	alarm_send_trap ((char *)pRow, ALM_REVERSE_AUTO_REC_TRAP);
}


extern struct thread_master *alarm_master;

/* notification callback */
int 
alarmNotification(unsigned int clientreg, void *clientarg)
{
	/* poll alarms */	
	stAlmTrapMsgSt	trapMsg;
	unsigned char	reportNumALoop = 0;
	while(gpnAlmTrapMsgQuenReceive(GPN_ALM_TRAP_THYE_ALL, &trapMsg) == GPN_ALM_API_OK && reportNumALoop < 100)
	{
		switch( trapMsg.msgType )
		{
			case GPN_ALM_TRAP_THYE_CURR:
				send_alarmProductTrap_trap(trapMsg.msgInfo); 
				break;
			case GPN_ALM_TRAP_THYE_HIST:
				send_alarmDisappearTrap_trap(trapMsg.msgInfo);
				break;
			case GPN_ALM_TRAP_THYE_EVENT:
				send_alarmEventReportTrap_trap(trapMsg.msgInfo); 
				break;
			case GPN_ALM_TRAP_THYE_AUTO_R:
				send_alarmReverseAutoRecTrap_trap(trapMsg.msgInfo);
				break;
			default:
				break;
		}
		reportNumALoop++;
	}

	//thread_add_timer_msec (alarm_master, alarmNotification, NULL, 500);
	return 0;
}

